
This file is to include your testing documentation. The file is to be
in plain text ASCII and properly spaced and edited so that when it is
viewed on a Linux machine it is readable. Not all ASCII files created
on a Windows machine display as expected due to the differences with
respect to how new lines and carriage returns are treated. Line widths
are to be limited to 80 characters.

---------------------------------------------------------------------------------
Memory Manager Tests
---------------------------------------------------------------------------------
1) 
- Test correct initialization of memory with kmeminit()

- kmeminit initializes the two free pieces of memory (with hole in-between) as two nodes.
The kprintf() statement in:
mem.c: line 28

When uncommented, will show that the correct starting points for the 2 initialized free memory
nodes are there. i.e. the nodes start at freemem and HOLEEND respectively.
The kprintf() also prints the sizes of the two nodes, which should be all the
available free memory. 

input:
kprintf("\nfreemem: %d, memSlotSize: %d, memSlotNextSize: %d, memSlotNext: %d\n", freemem, memSlot->size, memSlot->next->size, memSlot->next);

sample output:
freemem: 43328, memSlotSize: 612032, memSlotNextSize: 2531327, memSlotNext: 1662976

---------------------------------------------------------------------------------

2) 
- Test kmalloc()

- kmalloc is tested with kprinf() statements at:
init.c: line 66 - line 74

input:
  struct memHeader *memLocation = (struct memHeader *)kmalloc(16);
  if(memLocation != -1) kprintf("memLocation: %d, sanityCheck:%s, size:%d\n", memLocation, memLocation->sanityCheck, memLocation->size);
  kfree(memLocation);
  kfree(123);
  struct memHeader *memLocation2 = (struct memHeader *)kmalloc(20);
  if(memLocation2 != -1) kprintf("memLocation: %d, sanityCheck:%s, size:%d\n", memLocation2, memLocation2->sanityCheck, memLocation2->size);
  struct memHeader *memLocation3 = (struct memHeader *)kmalloc(1000000);
  if(memLocation3 != -1) kprintf("memLocation: %d, sanityCheck:%s, size:%d\n", memLocation3, memLocation3->sanityCheck, memLocation3->size);
  struct memHeader *memLocation4 = (struct memHeader *)kmalloc(20000);
  if(memLocation4 != -1) kprintf("memLocation: %d, sanityCheck:%s, size:%d\n", memLocation4, memLocation4->sanityCheck, memLocation4->size);
  struct memHeader *memLocation5 = (struct memHeader *)kmalloc(2000000000);
  if(memLocation5 != -1)kprintf("memLocation: %d, sanityCheck:%s, size:%d\n", memLocation5, memLocation5->sanityCheck, memLocation5->size);

- These lines allocate different amounts of space and the print statement shows that the
correct memory location is returned to us. The sanityCheck shows that the value given to us
is a memHeader. The if statement ensures that the return value is not -1 (error). The last
kmalloc requests a large amount of RAM, but the if statement check protect us from 
an exception. This also test readding the memory to the free list with kfree(),
and test giving kfree an invalid input.
Note that: 
To test kmalloc(), it is required to wrap the kmalloc function in an
if statement to check if the return value is -1, which would indicate an error.
In an actual function (not in testing), when kmalloc returns a -1, we
exit the caller also with error.


Also in:
mem.c: line 83
There is a kprintf() which shows that a new node has been created for the existing free
space, and that temp(the old node) is returned as free space.
intput:
kprintf("<temp:%d*newNode:%d*>",temp,newNode);

sample output:
<temp:43328*newNode:43360*>memLocation: 43328, sanityCheck:pizzapizza, size:16
 sucessfully readded mem
 invalid memory header
<temp:43360*newNode:43408*>memLocation: 43360, sanityCheck:pizzapizza, size:32
<temp:1662976*newNode:2662992*>memLocation: 1662976, sanityCheck:pizzapizza, siz
e:1000000
<temp:43408*newNode:63424*>memLocation: 43408, sanityCheck:pizzapizza, size:2000
0

---------------------------------------------------------------------------------
Process Management Tests	
---------------------------------------------------------------------------------
3) 
- Test syscreate in root()

- syscreate in root is tested in:
user.c: lines 15 - 34

- More pairs of producer and consumer are created, and when these lines are
uncommented, we see that these correctly produce the print statements.

input:
syscreate(producer);
syscreate(consumer);
syscreate(producer);
syscreate(consumer);
syscreate(producer);
syscreate(consumer);
syscreate(producer);
syscreate(consumer);
syscreate(producer);
syscreate(consumer);
syscreate(producer);
syscreate(consumer);
syscreate(producer);
syscreate(consumer);
syscreate(producer);
syscreate(consumer);
syscreate(producer);
syscreate(consumer);
syscreate(producer);
syscreate(consumer);

output:
py 101s Happy 101s Happy 101s Happy 101s Happy 101s
Birthday UBC Birthday UBC Birthday UBC Birthday UBC Birthday UBC Birthday UBC Bi
rthday UBC Birthday UBC Birthday UBC Birthday UBC Birthday UBC Birthday UBC Birt
hday UBC Birthday UBC Birthday UBC
Happy 101s Happy 101s Happy 101s Happy 101s Happy 101s Happy 101s Happy 101s Hap
py 101s Happy 101s Happy 101s Happy 101s Happy 101s
Birthday UBC Birthday UBC Birthday UBC Birthday UBC Birthday UBC Birthday UBC Bi
rthday UBC Birthday UBC Birthday UBC Birthday UBC Birthday UBC Birthday UBC Birt
hday UBC Birthday UBC Birthday UBC
Happy 101s Happy 101s Happy 101s Happy 101s Happy 101s Happy 101s Happy 101s Hap
py 101s Happy 101s Happy 101s Happy 101s Happy 101s
Birthday UBC Birthday UBC Birthday UBC Birthday UBC Birthday UBC Birthday UBC Bi
rthday UBC Birthday UBC Birthday UBC Birthday UBC Birthday UBC Birthday UBC Birt
hday UBC Birthday UBC Birthday UBC
Happy 101s Happy 101s Happy 101s Happy 101s Happy 101s Happy 101s Happy 101s Hap
py 101s Happy 101s Happy 101s Happy 101s Happy 101s
Birthday UBC Birthday UBC Birthday UBC Birthday UBC Birthday UBC Birthday UBC Bi
rthday UBC Birthday UBC Birthday UBC Birthday UBC Birthday UBC Birthday UBC Birt
hday UBC Birthday UBC Birthday UBC
Happy 101s Happy 101s Happy 101s Happy 101s Happy 101s Happy 101s Happy 101s Hap
py 101s Happy 101s Happy 101s Happy 101s Happy 101s
Birthday UBC Birthday UBC Birthday UBC Birthday UBC Birthday UBC Birthday UBC Bi
rthday UBC Birthday UBC Birthday UBC Birthday UBC Birthday UBC Birthday UBC Birt
hday UBC Birthday UBC Birthday UBC


---------------------------------------------------------------------------------
4)
- Test contextswitcher receives value from syscall

- syscall sends in the call type (STOP, YIELD, READY), and also the function pointer
if there is one in registers eax and edx respectively. This test shows that the correct values
are passed from syscall to the contextswitcher

- location:
syscall.c: line 29
input: 
kprintf("<syscall call: %d, result: %d, function:%d >", call, result, function);
ctsw.c: line 57
input: 
kprintf("<ctsw: eax:%d, func:%d >", EAX, p->function);

output:
<ctsw: eax:100, func:5766 ><syscall call: 100, result: 100, function:5766 ><ctsw
: eax:100, func:5821 ><syscall call: 100, result: 100, function:5821 ><ctsw: eax
:131, func:0 >

---------------------------------------------------------------------------------
---------------------------------------------------------------------------------

OVERALL TESTING METHODOLOGY
---------------------------------------------------------------------------------
This kernel was tested iteratively, with many kprintf() statements at each stage.
The stages involved were:
1) working on kmeminit
2) kmalloc
3) dispatcher
4) contextswitcher
5) user process
6) syscalls

kmeminit and kmalloc were relatively straight forward.
The dispatcher and contextswitcher code was initially taken from the slides,
then modified as need arose.
It was very difficult to test the dispatcher and contextswitcher, because until
we knew how to create a user process, and also have syscalls to be able to run
the second half of the contextswitcher, it was impossible to know if the dispatcher
and context switcher where correct or working properly.
When the user process and syscall could finally be started, it was then possible
to debug the dispatcher and especially the context switcher, which was very difficult
because it was in assembly, and understanding how to pass arguments form syscall to
the contextswitcher took a long time.


